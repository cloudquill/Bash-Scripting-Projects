#!/bin/bash
#
# Uploads files to an Azure Storage Blob container

source ./config

readonly OUTPUT_FILE="output.txt"

err() {
  echo "$*" >&2
}

spinner() {
  local pid="$1"
  local spin='-\|/'
  local i=0

  while kill -0 "$pid" 2>/dev/null; do
    i=$(( (i+1) % 4 ))
    printf "\r${spin:$i:1}"
    sleep 0.1
  done
  
  printf "\r"
}

search_file() {
  local file_to_search="$1"
  local directory basefilename
  
  if echo "${file_to_search}" | grep -q "/"; then
    directory="${file_to_search%/*}"
    basefilename="${file_to_search##*/}"
  else
    directory="$HOME"
    basefilename="${file_to_search}"
  fi

  find "${directory}" -type f -name "${basefilename}" 2>/dev/null
}

display_files() {
  local i=0
  echo
  for file in "$@"; do
    echo "$(( i+1 )): ${file}"
    i=$(( i+1 ))
  done
}

get_specific_file() {
  local number_of_files_found="$1"
  local file_number selected_file

  while true; do
    read -p "Input the file number you want to upload: " file_number
    if [[ "${file_number}" =~ ^[0-9]+$ ]] && \
       [[ "${file_number}" -ge 1 ]] && \
       [[ "${file_number}" -le "${number_of_files_found}" ]]; then
        selected_file=${found_files_array[$((file_number-1))]}
        upload_file_processing "${selected_file}"
        break
    else
        echo "Invalid file number. Please enter a number between 1 and \
        ${number_of_files_found}."
    fi
  done
}

upload_file_processing() {
  local file_to_upload="$1"

  printf "\nYou have selected: ${file_to_upload} \n"
  read -p "Would you like to continue? (Y/N): " upload_choice
  if [[ "${upload_choice,,}" == 'y' ]]; then
    echo "Uploading file..."
    upload_file "${file_to_upload}" ""
  else
    echo "Aborting upload..."
  fi
}

upload_file() {
  local file_to_upload="$1"
  local overwrite="false"
  local operation_type="$2"
  local filename="${file_to_upload##*/}"
  
  if [[ "${operation_type}" == "rename" ]]; then
    filename="$3"
  elif [[ "${operation_type}" == "overwrite" ]]; then
    overwrite="true"
  fi

  does_storage_acct_exist=$(az storage account check-name \
    --name "${ACCT_NAME}" \
    --query [nameAvailable] \
    -o tsv)
  
  if [[ "${does_storage_acct_exist}" == "true" ]]; then
    err "Storage account ${ACCT_NAME} does not exist."
    return 1
  fi

  upload_blob "${file_to_upload}" "${filename}" "${overwrite}"

  handle_error "${file_to_upload}"

  generate_shareable_link "${filename}"
}

upload_blob() {
  local file_to_upload="$1"
  local filename="$2"
  local overwrite="$3"
  local does_blob_exists pid

  does_blob_exists=$(az storage blob exists \
    --account-name "${ACCT_NAME}" \
    --container-name "${CONTAINER_NAME}" \
    --name "${filename}" \
    --query "exists" \
    --output tsv 2> /dev/null)
  
  if [[ "${does_blob_exists}" != "true" ]] || [[ "${overwrite}" == "true" ]]; then
    az storage blob upload \
      --account-name "${ACCT_NAME}" \
      --container-name "${CONTAINER_NAME}" \
      --file "${file_to_upload}" \
      --overwrite "${overwrite}" \
      --name "${filename}" &> "${OUTPUT_FILE}" &

    pid=$! # Process ID of the previous running command
    spinner "${pid}"
  else
    echo "Error: BlobAlreadyExists" > "${OUTPUT_FILE}"
  fi
}

handle_error() {
  local file_to_upload="$1"
  
  if ! wait_for_output_file "${OUTPUT_FILE}"; then
    err "Output file does not exist."
    exit 1
  elif grep -qi "error" "${OUTPUT_FILE}"; then
    if grep -q "BlobAlreadyExists" "${OUTPUT_FILE}"; then
      blob_already_exists_error "${file_to_upload}"
    else
      err "An unexpected error occurred."
      exit 1
    fi
  else
    echo 'File uploaded successfully.'
    rm "${OUTPUT_FILE}"
  fi
}

wait_for_output_file() {
  local max_attempts=10
  local attempt=0

  while [[ ! -s "${OUTPUT_FILE}" ]] && (( attempt < max_attempts )); do
    sleep 1
    ((attempt++))
  done

  if [[ ! -s "${OUTPUT_FILE}" ]]; then
    return 1
  fi
}

blob_already_exists_error() {
  local file_to_upload="$1"
  local operation_type file_overwrite_action new_filename

  read -p 'The file already exists. Overwrite or rename it? (O/R): ' file_overwrite_action
  if [[ "${file_overwrite_action,,}" == 'o' ]]; then
    operation_type="overwrite"

    upload_file "${file_to_upload}" "${operation_type}" ""
  elif [[ "${file_overwrite_action,,}" == 'r' ]]; then
    operation_type="rename"

    read -p "New file name: " new_filename
    upload_file "${file_to_upload}" "${operation_type}" "${new_filename}"
  fi
}

generate_shareable_link() {
  local blob_name="$1"
  local expiry_date shareable_link

  read -p "Would you like to generate a shareable link? (Y/N): " generate_link_choice
  
  if [[ "${generate_link_choice,,}" == 'y' ]]; then
    expiry_date=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')

    shareable_link=$(az storage blob generate-sas \
      --account-name "${ACCT_NAME}" \
      --container-name "${CONTAINER_NAME}" \
      --name "${blob_name} "\
      --permissions acdrw \
      --expiry "${expiry_date}" \
      --auth-mode login \
      --as-user \
      --full-uri 2> "${OUTPUT_FILE}")
    
    echo "Blob link: ${shareable_link}"
  fi

  exit 1
}

main() {
  if [[ ! -n "$1" ]]; then
    err "Expected a file name/path to be provided."
    return 1
  fi

  if az login --service-principal \
      --user "${APP_ID}" \
      --password "${PASSWORD}" \
      --tenant "${TENANT_ID}" &> "${OUTPUT_FILE}"; then

    filename="$1"
    found_files=$(search_file "${filename}")

    if [[ -n "${found_files}" ]]; then
      mapfile -t found_files_array <<< "${found_files}"
      length=${#found_files_array[@]}

      if [[ "${length}" -eq 1 ]]; then
        selected_file="${found_files_array[0]}"
        upload_file_processing "${selected_file}"
      else
        display_files "${found_files_array[@]}"
        get_specific_file "${length}" 
      fi
    else
      err "No file was found."
    fi
  else
    err "Could not authenticate with azure."
    exit 1
  fi
}

main "$1"